-- for문 LOOP. --
-- departments테이블에서 반복문을 이용해 부서 10, 20, 30, 40의 정보를 출력. --

DECLARE
    VDEPARTMENTS DEPARTMENTS%ROWTYPE;

BEGIN
    FOR I IN 1..9 LOOP
    SELECT * INTO VDEPARTMENTS FROM DEPARTMENTS WHERE DEPARTMENT_ID=i*10;
    DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||' | '||VDEPARTMENTS.DEPARTMENT_NAME);
    END LOOP; 
END;
/

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID=10;
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID=20;
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID=30;
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID=40;


DECLARE
    VDAN NUMBER := 1;
    I NUMBER := 1;

BEGIN
    FOR VDAN IN 1..9 LOOP
        FOR I IN 1...9 LOOP
        DBMS_OUTPUT.PUT_LINE(VDAN||' * '||I||' = '||(VDAN*I));
        END LOOP;

                    dbms_output.put_line(' ');
    END LOOP;
END;
/



DECLARE
    VDAN NUMBER := 1;
    I NUMBER := 1;

BEGIN
    FOR VDAN IN 1..9 LOOP
        FOR I IN 1..9 LOOP
        DBMS_OUTPUT.PUT_LINE(VDAN||'*'||i||'='||(VDAN*I)||'  ');
        end loop; --i

                    dbms_output.put_line(' ');

    end loop; --j

end;

/

-- departments 테이블의 전체 내용을 cursor에 저장 및 fetch문 통해 전체정보 출력하기. --
DECLARE
    VDEPARTMENTS DEPARTMENTS%ROWTYPE;
    CURSOR C1 IS SELECT * FROM DEPARTMENTS;

BEGIN
    OPEN C1;
        LOOP
        FETCH C1 INTO VDEPARTMENTS.DEPARTMENT_ID, VDEPARTMENTS.DEPARTMENT_NAME, VDEPARTMENTS.MANAGER_ID, VDEPARTMENTS.LOCATION_ID;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||' / '||VDEPARTMENTS.DEPARTMENT_NAME);
        END LOOP;
    
    CLOSE C1;

END;

/



-- departments 테이블 for문 사용하여 전체정보 출력하기. --
DECLARE
    VDEPARTMENTS DEPARTMENTS%ROWTYPE;
    CURSOR C1 IS SELECT * FROM DEPARTMENTS;

BEGIN
    FOR VDEPARTMENTS IN C1 LOOP
        DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||' / '||VDEPARTMENTS.DEPARTMENT_NAME);
    
    END LOOP;

END;

/


-- departments 테이블 더 간략하게 하여 전체정보 출력하기. --
DECLARE
    VDEPARTMENTS DEPARTMENTS%ROWTYPE;

BEGIN
    FOR VDEPARTMENTS IN (SELECT * FROM DEPARTMENTS) LOOP
        DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||' / '||VDEPARTMENTS.DEPARTMENT_NAME);
    
    END LOOP;

END;

/


-- employees 테이블에서 요구한 정보를 cursor에 저장 후(이름, 월급) 부서별 요청 시 해당되는 부서정보 출력. --
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID=20;


DECLARE
    VEMP_ROWTYPE EMPLOYEES%ROWTYPE;
    VSALARY VARCHAR2(10);
    VNO NUMBER(3);
    CURSOR C1 (VDEPARTMENTS EMPLOYEES.DEPARTMENT_ID%TYPE)
    IS
    SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID=VDEPARTMENTS;

BEGIN
    -- 부서별 정보 생성. (랜덤값) --
    VNO:=ROUND(DBMS_RANDOM.VALUE(10, 110), -1);
    -- 부서번호가 40일 시, 종료. --
    IF (VNO=40) THEN
    DBMS_OUTPUT.PUT_LINE(VNO||'은 해당되지 않는 번호.');
    RETURN;
    END IF;
    -- 부서별 정보를 가져와 월급에 대한 평가 진행. --
    FOR VEMP_ROWTYPE IN C1(VNO) LOOP
        IF VEMP_ROWTYPE.SALARY BETWEEN 1 AND 1000 THEN
            VSALARY := '낮음';
        ELSIF VEMP_ROWTYPE.SALARY BETWEEN 1001 AND 2000 THEN
            VSALARY := '중간';
        ELSIF VEMP_ROWTYPE.SALARY BETWEEN 2001 AND 3000 THEN
            VSALARY := '높음';
        ELSE
            VSALARY := '눈물';
        END IF;
        DBMS_OUTPUT.PUT_LINE(VNO||VEMP_ROWTYPE.FIRST_NAME||'/'||VEMP_ROWTYPE.SALARY||'/'||VSALARY);
    END LOOP;
END;
/


-- STORED PROCEDURE --
-- employees에서 사용자 이름을 패턴으로 검색한뒤, --
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE '%k%';

CREATE OR REPLACE PROCEDURE EMP_PROC

IS
    -- 문자 변수 선언. --
    VWORD VARCHAR2(1);
    VEMP_ROWTYPE EMPLOYEES%ROWTYPE;
    CURSOR CURSOR_NAME(VNAME VARCHAR2)
    IS
    SELECT * FROM EMPLOYEES WHERE UPPER(FIRST_NAME) LIKE UPPER('%'||VNAME||'%');
    
BEGIN
    -- 임의의 문자 생성.
    VWORD := DBMS_RANDOM.STRING('U', 1);
    
    FOR VEMP_ROWTYPE IN CURSOR_NAME(VWORD) LOOP
        DBMS_OUTPUT.PUT_LINE(VEMP_ROWTYPE.FIRST_NAME||'/'||VEMP_ROWTYPE.SALARY);
    END LOOP;
END;
/

SHOW ERROR;

EXECUTE EMP_PROC;

-- DATA DICTIONARY --
SELECT * FROM USER_TABLES;
SELECT * FROM USER_SOURCE;
SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_CONS_COLUMNS;
SELECT * FROM USER_INDEXES;
SELECT * FROM USER_IND_COLUMNS;
SELECT * FROM USER_VIEWS;
SELECT * FROM USER_SEQUENCES;

CREATE OR REPLACE NONEDITIONABLE PROCEDURE EMP_PROC2(VWORD IN VARCHAR2)
IS
    VEMP_ROWTYPE EMPLOYEES%ROWTYPE; 
    CURSOR CURSOR_NAME(VWORD VARCHAR2)
    IS
    SELECT * FROM EMPLOYEES WHERE upper(FIRST_NAME) LIKE upper('%'||VWORD||'%');
BEGIN
    FOR VEMP_ROWTYPE IN CURSOR_NAME(VWORD) LOOP
        DBMS_OUTPUT.PUT_LINE(VEMP_ROWTYPE.FIRST_NAME || '/'||VEMP_ROWTYPE.SALARY); 
    END LOOP; 
END;
/

EXECUTE EMP_PROC2('K');

-- IN MODE 매개변수. --
/* 부서별 SALARY인상.
- 부서코드가 10이면 10% 인상.
- 부서코드가 20이면 20% 인상.
- 나머지의 경우 모두 동결. */

--CREATE

SELECT * FROM USER_TABLES WHERE TABLE_NAME='EMP01';

DROP TABLE EMP01;

CREATE TABLE EMP01
AS
SELECT * FROM EMPLOYEES;

CREATE OR REPLACE PROCEDURE EMP01_PROC(VDEPARTMENT_ID IN EMPLOYEES.DEPARTMENT_ID%TYPE)
IS

BEGIN
    IF VDEPARTMENT_ID=10 THEN
        UPDATE EMP01 SET SALARY=SALARY*1.1 WHERE DEPARTMENT_ID=VDEPARTMENT_ID;
        DBMS_OUTPUT.PUT_LINE(VDEPARTMENT_ID||'부서 전원 10% 인상.');
    ELSIF VDEPARTMENT_ID=20 THEN
        UPDATE EMP01 SET SALARY=SALARY*1.2 WHERE DEPARTMENT_ID=VDEPARTMENT_ID;
        DBMS_OUTPUT.PUT_LINE(VDEPARTMENT_ID||'부서 전원 20% 인상.');
    ELSE
        DBMS_OUTPUT.PUT_LINE(VDEPARTMENT_ID||'부서 전원 동결.');
    END IF;

END;
/

SELECT * FROM EMP01 WHERE DEPARTMENT_ID=10;

EXECUTE EMP01_PROC(20);









CREATE PROCEDURE PROCEDURE_NAME

IS
    VWORD VARCHAR2(1);
    VEMP EMPLOYEES%ROWTYPE;
    CURSOR C1(VWORD VARCHAR2)
    IS
    SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
    FROM EMPLOYEES
    WHERE FIRST_NAME LIKE '%'||VWORD||'%';

BEGIN
    VWORD := DBMS_RANDOM.STRING('U', 1);
    DBMS_OUTPUT.PUT_LINE('임의의 문자 : '||VWORD);
    OPEN C1(VWORD);
    DBMS_OUTPUT.PUT_LINE('직원번호 / 직원명 / 급여');
    DBMS_OUTPUT.PUT_LINE('=====================');
    LOOP
    FETCH C1 INTO VEMP.EMPLOYEE_ID, VEMP.FIRST_NAME, VEMP.SALARY;
    
    IF
    C1%ROWCOUNT=0
    THEN
    DBMS_OUTPUT.PUT_LINE('해당 직원이 존재하지 않습니다.');
    
    END IF;
    EXIT WHEN C1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(VEMP.EMPLOYEE_ID||'/'||VEMP.FIRST_NAME||'/'||VEMP.SALARY);
    
    END LOOP;

END;

/

-- 생성된 저장 프로시저 실행 명령어. --
EXECUTE PROCEDURE_NAME;
EXEC PROCEDURE_NAME;

-- 저장 프로시저 생성 확인 명령어. --
SELECT * FROM USER_SOURCE;

-- 상세 오류메시지 출력 명령어. --
SHOW ERROR;

-- 매개 변수. --
CREATE OR REPLACE PROCEDURE PROCEDURE_NAME_2
(VDEPARTMENT_ID IN EMPLOYEES.DEPARTMENT_ID%TYPE) IS
    VEMP EMPLOYEES%ROWTYPE;
    CU
    RS
    OR
    C1
    IS
    SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID=VDEPARTMENT_ID;
BEGIN
    DBMS_OUTPUT.PUT_LINE('직원번호 / 직원명 / 급여');
    DBMS_OUTPUT.PUT_LINE('=====================');
    FOR VEMP IN C1
    LOOP
    
    DBMS_OUTPUT.PUT_LINE(VEMP.EMPLOYEE_ID||'/'||VEMP.FIRST_NAME||'/'||VEMP.SALARY);
    
    END LOOP;
END;

/

SHOW ERROR;

EXECUTE PROCEDURE_NAME_2;   -- PROCEDURE_NAME_2 실행.

-- IN MODE 매개변수. --
/* 부서별 SALARY인상.
- 부서코드가 10이면 10% 인상.
- 부서코드가 20이면 20% 인상.
- 나머지의 경우 모두 동결. */

-- 데이터 변경 전 확인. --
DROP TABLE EMP01;

CREATE TABLE EMP01 SELECT DEPARTMENT_ID, FIRST_NAME, SALARY FROM EMPLOYEES;

SELECT DEPARTMENT_ID, FIRST_NAME, SALARY FROM EMP01 WHERE DEPARTMENT_ID IN(10, 20);
-----------------------------------------------
CREATE OR REPLACE PROCEDURE EMPPROC_INMODE
(VDEPARTMENT_ID IN EMP01.DEPARTMENT_ID%TYPE) IS

BEGIN
    UPDATE EMP01 SET SALARY=DECODE(VDEPARTMENT_ID, 10, SALARY*1.1, 20, SALARY*1.2, SALARY)
    WHERE DEPARTMENT_ID=VDEPARTMENT_ID;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('수정이 완료되었습니다.');
    
END EMPPROC_INMODE;
/
SHOW ERROR;

EXECUTE EMPPROC_INMODE(10);
EXECUTE EMPPROC_INMODE(20);

SELECT DEPARTMENT_ID, FIRST_NAME, SALARY FROM EMP01 WHERE DEPARTMENT_ID IN(10, 20);