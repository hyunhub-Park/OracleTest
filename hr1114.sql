-- PL/SQL --
-- 내용을 화면에 출력하기. --

-- DECLARE 변수 선언할 것이 없을 때는 지우면 됨. --

BEGIN
    DBMS_OUTPUT.PUT_LINE('Hello World ORACLE');

-- EXCEPTION --

END;

/

/* 곱하기 연산. */
DECLARE
    NUM NUMBER(4);
    NUM NUMBER; -- 자리수를 지정하지 않아도 됨. --
    -- NUM NUMBER := 20*40*60; --
    
BEGIN
    NUM:=100;   -- NUM에 초기값 100 대입.
    DBMS_OUTPUT.PUT_LINE(NUM);
    DBMS_OUTPUT.PUT_LINE('NUM = '||NUM);

-- EXCEPTION

END;

/

/* VARCHAR2 */
DECLARE
    PHONE_NUM VARCHAR2(13);
    NAME VARCHAR2(10);
BEGIN
    PHONE_NUM := '010-0000-0000';
    NAME := 'PSH';
    DBMS_OUTPUT.PUT_LINE('PHONE_NUM : '||PHONE_NUM);
    DBMS_OUTPUT.PUT_LINE('NAME : '||NAME);

-- EXCEPTION

END;

/

VEMPNO EMPLOYEES.EMPLOYEE_ID%NUMBER;

desc employees;

-- employee의 이름, 사원번호를 가져와 출력. --
DECLARE
    VFIRST_NAME EMPLOYEES.FIRST_NAME%TYPE;
    VEMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE;

BEGIN
    SELECT first_name, employee_id INTO VFIRST_NAME, VEMPLOYEE_ID
    FROM employees WHERE first_name='Ellen';
    
    DBMS_OUTPUT.PUT_LINE('first_name = '||VFIRST_NAME);
    DBMS_OUTPUT.PUT_LINE('employee_id = '||VEMPLOYEE_ID);
--EXCEPTION

END;

/

SELECT first_name, employee_id FROM employees WHERE first_name='Ellen';


-- employee의 이름, 직업, 사원번호를 출력해주는 프로그램 작성. --
DECLARE
    -- 배열 타입.(테이블 타입 정의) --
    TYPE FIRST_NAME_ARRAY_TYPE IS TABLE OF EMPLOYEES.FIRST_NAME%TYPE
    INDEX BY BINARY_INTEGER;
    
    TYPE JOB_ID_ARRAY_TYPE IS TABLE OF EMPLOYEES.JOB_ID%TYPE
    INDEX BY BINARY_INTEGER;
    
    TYPE EMPLOYEE_ID_ARRAY_TYPE IS TABLE OF EMPLOYEES.EMPLOYEE_ID%TYPE
    INDEX BY BINARY_INTEGER;
    
    -- 배열타입 변수 선언. --
    FIRST_NAME_ARRAY FIRST_NAME_ARRAY_TYPE;
    JOB_ID_ARRAY JOB_ID_ARRAY_TYPE;
    EMPLOYEE_ID_ARRAY EMPLOYEE_ID_ARRAY_TYPE;
    ROW_ARRAY EMPLOYEES%ROWTYPE;
    I BINARY_INTEGER := 0;  /* count를 사용하는. 따라서 넘버 아닌 바이너리 인티저로. */
    J BINARY_INTEGER := 0;

BEGIN
    -- 향상된 for문. RESULT SET값을 한개씩 가져와 각 컬럼배열에 저장함. --
    FOR ROW_ARRAY IN (SELECT * FROM EMPLOYEES) LOOP I := I+1;
    FIRST_NAME_ARRAY(I) := ROW_ARRAY.FIRST_NAME;
    
    JOB_ID_ARRAY(I) := ROW_ARRAY.JOB_ID;
    
    EMPLOYEE_ID_ARRAY(I) := ROW_ARRAY.EMPLOYEE_ID;
    
    END LOOP;
    -- 향상된 for문을 이용해 컬럼 배열값에 저장된 값을 가져와 출력. --
    FOR J IN 1..I LOOP
    DBMS_OUTPUT.PUT_LINE(FIRST_NAME_ARRAY(J)||'  /  '||JOB_ID_ARRAY(J)||'  /  '||EMPLOYEE_ID_ARRAY(J));
    
    END LOOP;
    
    
-- EXCEPTION

END;

/

-- employee의 이름, 직업, 사원번호를 출력해주는 프로그램 작성. --
DECLARE
    -- 배열 타입.(테이블 타입 정의) --
    TYPE FIRST_NAME_TABLE IS TABLE OF EMPLOYEES.FIRST_NAME%TYPE
    INDEX BY BINARY_INTEGER;
    
    TYPE JOB_ID_TABLE IS TABLE OF EMPLOYEES.JOB_ID%TYPE
    INDEX BY BINARY_INTEGER;
    
    TYPE EMPLOYEE_ID_TABLE IS TABLE OF EMPLOYEES.EMPLOYEE_ID%TYPE
    INDEX BY BINARY_INTEGER;
    
    
    -- 배열타입 변수 선언. --
    FIRST_NAME_TABLE FIRST_NAME_ARRAY;
    JOB_ID_TABLE JOB_ID_ARRAY;
    EMPLOYEE_ID_TABLE EMPLOYEE_ID_ARRAY;
    ROW_ARRAY EMPLOYEES%ROWTYPE;
    I BINARY_INTEGER := 0;
    J BINARY_INTEGER := 0;
    
BEGIN
    -- 향상된 for문. RESULT SET값을 한개씩 가져와 각 컬럼배열에 저장함. --
    FOR ROW_ARRAY IN(SELECT * FROM EMPLOYEES) LOOP I := I+1;
    
    FIRST_NAME_TABLE(I) := ROW_ARRAY.FIRST_NAME;
    
    JOB_ID_TABLE(I) := ROW_ARRAY.JOB_ID;
    
    EMPLOYEE_ID_TABLE(I) := ROW_ARRAY.EMPLOYEE_ID;    
    
    END LOOP;

    -- 향상된 for문을 이용해 컬럼 배열값에 저장된 값을 가져와 출력. --
    FOR J IN 1..I LOOP

    DBMS_OUTPUT.PUT_LINE(FIRST_NAME_TABLE(J)||' / '||JOB_ID_TABLE(J)||' / '||EMPLOYEE_ID_TABLE(J));

    END LOOP;
    
-- EXCEPTION

END;

/

-- employee테이블에서 'Susan'이라는 이름을 가진 사원의 사원번호, 사원명, 부서번호 출력. --
DECLARE
    VEMPLOYEE_ID EMPLOYEES.EMPLOYEE_id%TYPE;
    VFIRST_NAME EMPLOYEES.FIRST_NAME%TYPE;
    VLAST_NAME EMPLOYEES.LAST_NAME%TYPE;
    VDEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE;

BEGIN
    SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, DEPARTMENT_ID
    INTO VEMPLOYEE_ID, VFIRST_NAME, VLAST_NAME, VDEPARTMENT_ID
    FROM EMPLOYEES WHERE FIRST_NAME='Susan';

    DBMS_OUTPUT.PUT_LINE(VEMPLOYEE_ID||' | '||VFIRST_NAME||' | '||VLAST_NAME||' | '||VDEPARTMENT_ID);
END;
/

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, DEPARTMENT_ID FROM EMPLOYEES WHERE FIRST_NAME='Susan';










-- EMPLOYEES 테이블에 등록된 총사원의 수와 급여의 합, 급여의 평균을 변수에 대입하여 출력하기. --
DECLARE
    VEMPLOYEE NUMBER;
    VSALARY_SUM NUMBER;
    VSALARY_AVG NUMBER(10, 1);

BEGIN
    SELECT COUNT(*), SUM(salary), AVG(salary)
    INTO VEMPLOYEE, VSALARY_SUM, VSALARY_AVG
    FROM EMPLOYEES;

    DBMS_OUTPUT.PUT_LINE(VEMPLOYEE||' | '||VSALARY_SUM||' | '||VSALARY_AVG);
END;

/

/*DECLARE
    VCOUNT NUMBER;
    VSUM NUMBER;
    VAVG NUMBER(10,2);
BEGIN
    SELECT COUNT(*),SUM(SALARY),AVG(SALARY)
    INTO VCOUNT,VSUM,VAVG
    FROM EMPLOYEES;
      
    DBMS_OUTPUT.PUT_LINE('총 사원수: '||VCOUNT);  
    DBMS_OUTPUT.PUT_LINE('급여합: '||VSUM);
    DBMS_OUTPUT.PUT_LINE('급여평균: '||VAVG);
    
END;
/*/


-- Clara 사원의 직무, 급여, 입사일자, 커미션, 부서명을 변수에 대입하여 출력하기. --

DECLARE
    VJOB_ID EMPLOYEES.

BEGIN

END;

/


DECLARE
    VEMPLOYEES EMPLOYEES%ROWTYPE;
    VDEPARTMENTS DEPARTMENTS%ROWTYPE;
BEGIN
    SELECT JOB_ID,SALARY,HIRE_DATE,DEPARTMENT_NAME
    INTO VEMPLOYEES.JOB_ID,VEMPLOYEES.SALARY,VEMPLOYEES.HIRE_DATE,VDEPARTMENTS.DEPARTMENT_NAME
    FROM employees EMP INNER JOIN DEPARTMENTS DEPT
    ON EMP.DEPARTMENT_ID = dept.department_id
    WHERE FIRST_NAME = 'Jack';
    
    DBMS_OUTPUT.PUT_LINE('이름: '||VEMPLOYEES.FIRST_NAME);
    DBMS_OUTPUT.PUT_LINE('직무: '||VEMPLOYEES.JOB_ID);
    DBMS_OUTPUT.PUT_LINE('급여: '||VEMPLOYEES.SALARY);
    DBMS_OUTPUT.PUT_LINE('입사일자: '||VEMPLOYEES.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE('부서명: '||VDEPARTMENTS.DEPARTMENT_NAME);
END;
/

